package assert

import (
	"fmt"
	"reflect"
	"testing"
	"unsafe"
)

func TestWriteValDiff(t *testing.T) {
	a := new(int)
	sa := fmt.Sprintf("%p", a)
	b := make(chan int)
	sb := fmt.Sprintf("%p", b)
	c := func(int) bool { return true }
	sc := fmt.Sprintf("%p", c)
	cs := []interface{}{
		nil, int8(-1), int16(-10), int32(-100), int64(-1000), int(-10000),
		uint8(1), uint16(10), uint32(100), uint64(1000), uint(10000), uintptr(100000),
		float32(1.25), float64(10.25),
		complex64(2), complex64(-1 + 1i), complex64(1i),
		complex128(3), complex128(-2 + 2i), complex128(2i),
		(*int)(a), (*uint)(unsafe.Pointer(a)), unsafe.Pointer(P(200)),
		chan int(b), chan uint(nil), (func(int) bool)(c),
		string("中a文b"), string("a中文bc"),
		[0]int{}, [...]interface{}{uint(1), float32(2), complex128(3)},
		[]int(nil), []int{}, []interface{}{int8(1), float64(2), complex128(3i), P(100)},
	}
	rs := [][]struct {
		s1, s2 string
	}{
		{{H("<nil>"), H("int8") + "(-1)"}, {H("-1"), H("-1")}},
		{{H("<nil>"), H("int16") + "(-10)"}, {H("-1"), H("-10")}, {H("-10"), H("-10")}},
		{{H("<nil>"), H("int32") + "(-100)"}, {H("-1"), H("-100")}, {H("-10"), H("-100")}, {H("-100"), H("-100")}},
		{{H("<nil>"), H("int64") + "(-1000)"}, {H("-1"), H("-1000")}, {H("-10"), H("-1000")}, {H("-100"), H("-1000")}, {H("-1000"), H("-1000")}},
		{{H("<nil>"), H("int") + "(-10000)"}, {H("-1"), H("-10000")}, {H("-10"), H("-10000")}, {H("-100"), H("-10000")}, {H("-1000"), H("-10000")},
			{H("-10000"), H("-10000")}},
		{{H("<nil>"), H("uint8") + "(1)"}, {H("-1"), H("1")}, {H("-10"), H("1")}, {H("-100"), H("1")}, {H("-1000"), H("1")}, {H("-10000"), H("1")}, {H("1"), H("1")}},
		{{H("<nil>"), H("uint16") + "(10)"}, {H("-1"), H("10")}, {H("-10"), H("10")}, {H("-100"), H("10")}, {H("-1000"), H("10")}, {H("-10000"), H("10")},
			{H("1"), H("10")}, {H("10"), H("10")}},
		{{H("<nil>"), H("uint32") + "(100)"}, {H("-1"), H("100")}, {H("-10"), H("100")}, {H("-100"), H("100")}, {H("-1000"), H("100")}, {H("-10000"), H("100")},
			{H("1"), H("100")}, {H("10"), H("100")}, {H("100"), H("100")}},
		{{H("<nil>"), H("uint64") + "(1000)"}, {H("-1"), H("1000")}, {H("-10"), H("1000")}, {H("-100"), H("1000")}, {H("-1000"), H("1000")}, {H("-10000"), H("1000")},
			{H("1"), H("1000")}, {H("10"), H("1000")}, {H("100"), H("1000")}, {H("1000"), H("1000")}},
		{{H("<nil>"), H("uint") + "(10000)"}, {H("-1"), H("10000")}, {H("-10"), H("10000")}, {H("-100"), H("10000")}, {H("-1000"), H("10000")},
			{H("-10000"), H("10000")}, {H("1"), H("10000")}, {H("10"), H("10000")}, {H("100"), H("10000")}, {H("1000"), H("10000")}, {H("10000"), H("10000")}},
		{{H("<nil>"), H("uintptr") + "(0x186a0)"}, {H("-1"), H("0x186a0") + "(100000)"}, {H("-10"), H("0x186a0") + "(100000)"}, {H("-100"), H("0x186a0") + "(100000)"},
			{H("-1000"), H("0x186a0") + "(100000)"}, {H("-10000"), H("0x186a0") + "(100000)"}, {H("1"), H("0x186a0") + "(100000)"},
			{H("10"), H("0x186a0") + "(100000)"}, {H("100"), H("0x186a0") + "(100000)"}, {H("1000"), H("0x186a0") + "(100000)"},
			{H("10000"), H("0x186a0") + "(100000)"}, {H("0x186a0"), H("0x186a0")}},
		{{H("<nil>"), H("float32") + "(1.25)"}, {H("-1"), H("1.25")}, {H("-10"), H("1.25")}, {H("-100"), H("1.25")}, {H("-1000"), H("1.25")}, {H("-10000"), H("1.25")},
			{H("1"), H("1.25")}, {H("10"), H("1.25")}, {H("100"), H("1.25")}, {H("1000"), H("1.25")}, {H("10000"), H("1.25")}, {H("0x186a0") + "(100000)", H("1.25")},
			{H("1.25"), H("1.25")}},
		{{H("<nil>"), H("float64") + "(10.25)"}, {H("-1"), H("10.25")}, {H("-10"), H("10.25")}, {H("-100"), H("10.25")}, {H("-1000"), H("10.25")},
			{H("-10000"), H("10.25")}, {H("1"), H("10.25")}, {H("10"), H("10.25")}, {H("100"), H("10.25")}, {H("1000"), H("10.25")}, {H("10000"), H("10.25")},
			{H("0x186a0") + "(100000)", H("10.25")}, {H("1.25"), H("10.25")}, {H("10.25"), H("10.25")}},
		{{H("<nil>"), H("complex64") + "(2+0i)"}, {H("-1"), "(" + H("2") + "+0i)"}, {H("-10"), "(" + H("2") + "+0i)"}, {H("-100"), "(" + H("2") + "+0i)"},
			{H("-1000"), "(" + H("2") + "+0i)"}, {H("-10000"), "(" + H("2") + "+0i)"}, {H("1"), "(" + H("2") + "+0i)"}, {H("10"), "(" + H("2") + "+0i)"},
			{H("100"), "(" + H("2") + "+0i)"}, {H("1000"), "(" + H("2") + "+0i)"}, {H("10000"), "(" + H("2") + "+0i)"},
			{H("0x186a0") + "(100000)", "(" + H("2") + "+0i)"}, {H("1.25"), "(" + H("2") + "+0i)"}, {H("10.25"), "(" + H("2") + "+0i)"}, {"(2+0i)", "(2+0i)"}},
		{{H("<nil>"), H("complex64") + "(-1+1i)"}, {"-1", "(-1+" + H("1i") + ")"}, {H("-10"), "(" + H("-1+1i") + ")"}, {H("-100"), "(" + H("-1+1i") + ")"},
			{H("-1000"), "(" + H("-1+1i") + ")"}, {H("-10000"), "(" + H("-1+1i") + ")"}, {H("1"), "(" + H("-1+1i") + ")"}, {H("10"), "(" + H("-1+1i") + ")"},
			{H("100"), "(" + H("-1+1i") + ")"}, {H("1000"), "(" + H("-1+1i") + ")"}, {H("10000"), "(" + H("-1+1i") + ")"}, {H("0x186a0"), "(" + H("-1+1i") + ")"},
			{H("1.25"), "(" + H("-1+1i") + ")"}, {H("10.25"), "(" + H("-1+1i") + ")"}, {"(" + H("2+0i") + ")", "(" + H("-1+1i") + ")"}, {"(-1+1i)", "(-1+1i)"}},
		{{H("<nil>"), H("complex64") + "(0+1i)"}, {H("-1"), "(" + H("0+1i") + ")"}, {H("-10"), "(" + H("0+1i") + ")"}, {H("-100"), "(" + H("0+1i") + ")"},
			{H("-1000"), "(" + H("0+1i") + ")"}, {H("-10000"), "(" + H("0+1i") + ")"}, {H("1"), "(" + H("0+1i") + ")"}, {H("10"), "(" + H("0+1i") + ")"},
			{H("100"), "(" + H("0+1i") + ")"}, {H("1000"), "(" + H("0+1i") + ")"}, {H("10000"), "(" + H("0+1i") + ")"}, {H("0x186a0"), "(" + H("0+1i") + ")"},
			{H("1.25"), "(" + H("0+1i") + ")"}, {H("10.25"), "(" + H("0+1i") + ")"}, {"(" + H("2+0i") + ")", "(" + H("0+1i") + ")"},
			{"(" + H("-1") + "+1i)", "(" + H("0") + "+1i)"}, {"(0+1i)", "(0+1i)"}},
		{{H("<nil>"), H("complex128") + "(3+0i)"}, {H("-1"), "(" + H("3") + "+0i)"}, {H("-10"), "(" + H("3") + "+0i)"}, {H("-100"), "(" + H("3") + "+0i)"},
			{H("-1000"), "(" + H("3") + "+0i)"}, {H("-10000"), "(" + H("3") + "+0i)"}, {H("1"), "(" + H("3") + "+0i)"}, {H("10"), "(" + H("3") + "+0i)"},
			{H("100"), "(" + H("3") + "+0i)"}, {H("1000"), "(" + H("3") + "+0i)"}, {H("10000"), "(" + H("3") + "+0i)"},
			{H("0x186a0") + "(100000)", "(" + H("3") + "+0i)"}, {H("1.25"), "(" + H("3") + "+0i)"}, {H("10.25"), "(" + H("3") + "+0i)"},
			{"(" + H("2") + "+0i)", "(" + H("3") + "+0i)"}, {"(" + H("-1+1i") + ")", "(" + H("3+0i") + ")"}, {"(" + H("0+1i") + ")", "(" + H("3+0i") + ")"},
			{"(3+0i)", "(3+0i)"}},
		{{H("<nil>"), H("complex128") + "(-2+2i)"}, {H("-1"), "(" + H("-2+2i") + ")"}, {H("-10"), "(" + H("-2+2i") + ")"}, {H("-100"), "(" + H("-2+2i") + ")"},
			{H("-1000"), "(" + H("-2+2i") + ")"}, {H("-10000"), "(" + H("-2+2i") + ")"}, {H("1"), "(" + H("-2+2i") + ")"}, {H("10"), "(" + H("-2+2i") + ")"},
			{H("100"), "(" + H("-2+2i") + ")"}, {H("1000"), "(" + H("-2+2i") + ")"}, {H("10000"), "(" + H("-2+2i") + ")"}, {H("0x186a0"), "(" + H("-2+2i") + ")"},
			{H("1.25"), "(" + H("-2+2i") + ")"}, {H("10.25"), "(" + H("-2+2i") + ")"}, {"(" + H("2+0i") + ")", "(" + H("-2+2i") + ")"},
			{"(" + H("-1+1i") + ")", "(" + H("-2+2i") + ")"}, {"(" + H("0+1i") + ")", "(" + H("-2+2i") + ")"}, {"(" + H("3+0i") + ")", "(" + H("-2+2i") + ")"},
			{"(-2+2i)", "(-2+2i)"}},
		{{H("<nil>"), H("complex128") + "(0+2i)"}, {H("-1"), "(" + H("0+2i") + ")"}, {H("-10"), "(" + H("0+2i") + ")"}, {H("-100"), "(" + H("0+2i") + ")"},
			{H("-1000"), "(" + H("0+2i") + ")"}, {H("-10000"), "(" + H("0+2i") + ")"}, {H("1"), "(" + H("0+2i") + ")"}, {H("10"), "(" + H("0+2i") + ")"},
			{H("100"), "(" + H("0+2i") + ")"}, {H("1000"), "(" + H("0+2i") + ")"}, {H("10000"), "(" + H("0+2i") + ")"}, {H("0x186a0"), "(" + H("0+2i") + ")"},
			{H("1.25"), "(" + H("0+2i") + ")"}, {H("10.25"), "(" + H("0+2i") + ")"}, {"(" + H("2+0i") + ")", "(" + H("0+2i") + ")"},
			{"(" + H("-1+1i") + ")", "(" + H("0+2i") + ")"}, {"(0+" + H("1i") + ")", "(0+" + H("2i") + ")"}, {"(" + H("3+0i") + ")", "(" + H("0+2i") + ")"},
			{"(" + H("-2") + "+2i)", "(" + H("0") + "+2i)"}, {"(0+2i)", "(0+2i)"}},
		{{H("<nil>"), H(sa)}, {H("int8") + "(-1)", "(" + H("*int") + ")(" + sa + ")"}, {H("int16") + "(-10)", "(" + H("*int") + ")(" + sa + ")"},
			{H("int32") + "(-100)", "(" + H("*int") + ")(" + sa + ")"}, {H("int64") + "(-1000)", "(" + H("*int") + ")(" + sa + ")"},
			{H("int") + "(-10000)", "(" + H("*int") + ")(" + sa + ")"}, {H("uint8") + "(1)", "(" + H("*int") + ")(" + sa + ")"},
			{H("uint16") + "(10)", "(" + H("*int") + ")(" + sa + ")"}, {H("uint32") + "(100)", "(" + H("*int") + ")(" + sa + ")"},
			{H("uint64") + "(1000)", "(" + H("*int") + ")(" + sa + ")"}, {H("uint") + "(10000)", "(" + H("*int") + ")(" + sa + ")"},
			{H("uintptr") + "(0x186a0)", "(" + H("*int") + ")(" + sa + ")"}, {H("float32") + "(1.25)", "(" + H("*int") + ")(" + sa + ")"},
			{H("float64") + "(10.25)", "(" + H("*int") + ")(" + sa + ")"}, {H("complex64") + "(2+0i)", "(" + H("*int") + ")(" + sa + ")"},
			{H("complex64") + "(-1+1i)", "(" + H("*int") + ")(" + sa + ")"}, {H("complex64") + "(0+1i)", "(" + H("*int") + ")(" + sa + ")"},
			{H("complex128") + "(3+0i)", "(" + H("*int") + ")(" + sa + ")"}, {H("complex128") + "(-2+2i)", "(" + H("*int") + ")(" + sa + ")"},
			{H("complex128") + "(0+2i)", "(" + H("*int") + ")(" + sa + ")"}, {"(*int)(" + H(sa) + ")", "(*int)(" + H(sa) + ")"}},
		{{H("<nil>"), H(sa)}, {H("int8") + "(-1)", "(" + H("*uint") + ")(" + sa + ")"}, {H("int16") + "(-10)", "(" + H("*uint") + ")(" + sa + ")"},
			{H("int32") + "(-100)", "(" + H("*uint") + ")(" + sa + ")"}, {H("int64") + "(-1000)", "(" + H("*uint") + ")(" + sa + ")"},
			{H("int") + "(-10000)", "(" + H("*uint") + ")(" + sa + ")"}, {H("uint8") + "(1)", "(" + H("*uint") + ")(" + sa + ")"},
			{H("uint16") + "(10)", "(" + H("*uint") + ")(" + sa + ")"}, {H("uint32") + "(100)", "(" + H("*uint") + ")(" + sa + ")"},
			{H("uint64") + "(1000)", "(" + H("*uint") + ")(" + sa + ")"}, {H("uint") + "(10000)", "(" + H("*uint") + ")(" + sa + ")"},
			{H("uintptr") + "(0x186a0)", "(" + H("*uint") + ")(" + sa + ")"}, {H("float32") + "(1.25)", "(" + H("*uint") + ")(" + sa + ")"},
			{H("float64") + "(10.25)", "(" + H("*uint") + ")(" + sa + ")"}, {H("complex64") + "(2+0i)", "(" + H("*uint") + ")(" + sa + ")"},
			{H("complex64") + "(-1+1i)", "(" + H("*uint") + ")(" + sa + ")"}, {H("complex64") + "(0+1i)", "(" + H("*uint") + ")(" + sa + ")"},
			{H("complex128") + "(3+0i)", "(" + H("*uint") + ")(" + sa + ")"}, {H("complex128") + "(-2+2i)", "(" + H("*uint") + ")(" + sa + ")"},
			{H("complex128") + "(0+2i)", "(" + H("*uint") + ")(" + sa + ")"}, {"(" + H("*int") + ")(" + sa + ")", "(" + H("*uint") + ")(" + sa + ")"},
			{"(*uint)(" + H(sa) + ")", "(*uint)(" + H(sa) + ")"}},
		{{H("<nil>"), H("0xc8")}, {H("int8") + "(-1)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H("int16") + "(-10)", "(" + H("unsafe.Pointer") + ")(0xc8)"}, {H("int32") + "(-100)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H("int64") + "(-1000)", "(" + H("unsafe.Pointer") + ")(0xc8)"}, {H("int") + "(-10000)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H("uint8") + "(1)", "(" + H("unsafe.Pointer") + ")(0xc8)"}, {H("uint16") + "(10)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H("uint32") + "(100)", "(" + H("unsafe.Pointer") + ")(0xc8)"}, {H("uint64") + "(1000)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H("uint") + "(10000)", "(" + H("unsafe.Pointer") + ")(0xc8)"}, {H("uintptr") + "(0x186a0)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H("float32") + "(1.25)", "(" + H("unsafe.Pointer") + ")(0xc8)"}, {H("float64") + "(10.25)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H("complex64") + "(2+0i)", "(" + H("unsafe.Pointer") + ")(0xc8)"}, {H("complex64") + "(-1+1i)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H("complex64") + "(0+1i)", "(" + H("unsafe.Pointer") + ")(0xc8)"}, {H("complex128") + "(3+0i)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H("complex128") + "(-2+2i)", "(" + H("unsafe.Pointer") + ")(0xc8)"}, {H("complex128") + "(0+2i)", "(" + H("unsafe.Pointer") + ")(0xc8)"},
			{H(sa), H("0xc8")}, {H(sa), H("0xc8")}, {H("0xc8"), H("0xc8")}},
		{{H("<nil>"), H(sb)}, {H("int8") + "(-1)", "(" + H("chan int") + ")(" + sb + ")"},
			{H("int16") + "(-10)", "(" + H("chan int") + ")(" + sb + ")"}, {H("int32") + "(-100)", "(" + H("chan int") + ")(" + sb + ")"},
			{H("int64") + "(-1000)", "(" + H("chan int") + ")(" + sb + ")"}, {H("int") + "(-10000)", "(" + H("chan int") + ")(" + sb + ")"},
			{H("uint8") + "(1)", "(" + H("chan int") + ")(" + sb + ")"}, {H("uint16") + "(10)", "(" + H("chan int") + ")(" + sb + ")"},
			{H("uint32") + "(100)", "(" + H("chan int") + ")(" + sb + ")"}, {H("uint64") + "(1000)", "(" + H("chan int") + ")(" + sb + ")"},
			{H("uint") + "(10000)", "(" + H("chan int") + ")(" + sb + ")"}, {H("uintptr") + "(0x186a0)", "(" + H("chan int") + ")(" + sb + ")"},
			{H("float32") + "(1.25)", "(" + H("chan int") + ")(" + sb + ")"}, {H("float64") + "(10.25)", "(" + H("chan int") + ")(" + sb + ")"},
			{H("complex64") + "(2+0i)", "(" + H("chan int") + ")(" + sb + ")"}, {H("complex64") + "(-1+1i)", "(" + H("chan int") + ")(" + sb + ")"},
			{H("complex64") + "(0+1i)", "(" + H("chan int") + ")(" + sb + ")"}, {H("complex128") + "(3+0i)", "(" + H("chan int") + ")(" + sb + ")"},
			{H("complex128") + "(-2+2i)", "(" + H("chan int") + ")(" + sb + ")"}, {H("complex128") + "(0+2i)", "(" + H("chan int") + ")(" + sb + ")"},
			{"(" + H("*int") + ")(" + sa + ")", "(" + H("chan int") + ")(" + sb + ")"}, {"(" + H("*uint") + ")(" + sa + ")", "(" + H("chan int") + ")(" + sb + ")"},
			{"(" + H("unsafe.Pointer") + ")(0xc8)", "(" + H("chan int") + ")(" + sb + ")"}, {"(chan int)(" + H(sb) + ")", "(chan int)(" + H(sb) + ")"}},
		{{H("<nil>"), H("<nil>")}, {H("int8") + "(-1)", "(" + H("chan uint") + ")(nil)"}, {H("int16") + "(-10)", "(" + H("chan uint") + ")(nil)"},
			{H("int32") + "(-100)", "(" + H("chan uint") + ")(nil)"}, {H("int64") + "(-1000)", "(" + H("chan uint") + ")(nil)"},
			{H("int") + "(-10000)", "(" + H("chan uint") + ")(nil)"}, {H("uint8") + "(1)", "(" + H("chan uint") + ")(nil)"},
			{H("uint16") + "(10)", "(" + H("chan uint") + ")(nil)"}, {H("uint32") + "(100)", "(" + H("chan uint") + ")(nil)"},
			{H("uint64") + "(1000)", "(" + H("chan uint") + ")(nil)"}, {H("uint") + "(10000)", "(" + H("chan uint") + ")(nil)"},
			{H("uintptr") + "(0x186a0)", "(" + H("chan uint") + ")(nil)"}, {H("float32") + "(1.25)", "(" + H("chan uint") + ")(nil)"},
			{H("float64") + "(10.25)", "(" + H("chan uint") + ")(nil)"}, {H("complex64") + "(2+0i)", "(" + H("chan uint") + ")(nil)"},
			{H("complex64") + "(-1+1i)", "(" + H("chan uint") + ")(nil)"}, {H("complex64") + "(0+1i)", "(" + H("chan uint") + ")(nil)"},
			{H("complex128") + "(3+0i)", "(" + H("chan uint") + ")(nil)"}, {H("complex128") + "(-2+2i)", "(" + H("chan uint") + ")(nil)"},
			{H("complex128") + "(0+2i)", "(" + H("chan uint") + ")(nil)"}, {"(" + H("*int") + ")(" + sa + ")", "(" + H("chan uint") + ")(nil)"},
			{"(" + H("*uint") + ")(" + sa + ")", "(" + H("chan uint") + ")(nil)"}, {"(" + H("unsafe.Pointer") + ")(0xc8)", "(" + H("chan uint") + ")(nil)"},
			{"(" + H("chan int") + ")(" + sb + ")", "(" + H("chan uint") + ")(nil)"}, {"(chan uint)(" + H("nil") + ")", "(chan uint)(" + H("nil") + ")"}},
		{{H("<nil>"), H(sc)}, {H("int8") + "(-1)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{H("int16") + "(-10)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {H("int32") + "(-100)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{H("int64") + "(-1000)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {H("int") + "(-10000)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{H("uint8") + "(1)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {H("uint16") + "(10)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{H("uint32") + "(100)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {H("uint64") + "(1000)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{H("uint") + "(10000)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {H("uintptr") + "(0x186a0)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{H("float32") + "(1.25)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {H("float64") + "(10.25)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{H("complex64") + "(2+0i)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {H("complex64") + "(-1+1i)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{H("complex64") + "(0+1i)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {H("complex128") + "(3+0i)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{H("complex128") + "(-2+2i)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {H("complex128") + "(0+2i)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{"(" + H("*int") + ")(" + sa + ")", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{"(" + H("*uint") + ")(" + sa + ")", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{"(" + H("unsafe.Pointer") + ")(0xc8)", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{"(" + H("chan int") + ")(" + sb + ")", "(" + H("func(int) bool") + ")(" + sc + ")"},
			{"(" + H("chan uint") + ")(nil)", "(" + H("func(int) bool") + ")(" + sc + ")"}, {"(func(int) bool)(" + H(sc) + ")", "(func(int) bool)(" + H(sc) + ")"}},
		{{H("<nil>"), H("string") + `("中a文b")`}, {H("-1"), H(`"中a文b"`)}, {H("-10"), H(`"中a文b"`)}, {H("-100"), H(`"中a文b"`)},
			{H("-1000"), H(`"中a文b"`)}, {H("-10000"), H(`"中a文b"`)}, {H("1"), H(`"中a文b"`)}, {H("10"), H(`"中a文b"`)},
			{H("100"), H(`"中a文b"`)}, {H("1000"), H(`"中a文b"`)}, {H("10000"), H(`"中a文b"`)}, {H("0x186a0"), H(`"中a文b"`)},
			{H("float32") + "(1.25)", H("string") + `("中a文b")`}, {H("float64") + "(10.25)", H("string") + `("中a文b")`},
			{H("complex64") + "(2+0i)", H("string") + `("中a文b")`}, {H("complex64") + "(-1+1i)", H("string") + `("中a文b")`},
			{H("complex64") + "(0+1i)", H("string") + `("中a文b")`}, {H("complex128") + "(3+0i)", H("string") + `("中a文b")`},
			{H("complex128") + "(-2+2i)", H("string") + `("中a文b")`}, {H("complex128") + "(0+2i)", H("string") + `("中a文b")`},
			{"(" + H("*int") + ")(" + sa + ")", H("string") + `("中a文b")`}, {"(" + H("*uint") + ")(" + sa + ")", H("string") + `("中a文b")`},
			{"(" + H("unsafe.Pointer") + ")(0xc8)", H("string") + `("中a文b")`}, {"(" + H("chan int") + ")(" + sb + ")", H("string") + `("中a文b")`},
			{"(" + H("chan uint") + ")(nil)", H("string") + `("中a文b")`}, {"(" + H("func(int) bool") + ")(" + sc + ")", H("string") + `("中a文b")`},
			{`"中a文b"`, `"中a文b"`}},
		{{s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {`"` + H("中a") + `文b"`, `"` + H("a中") + "文b" + H("c") + `"`}, {s1: "skip"}},
		{{H("<nil>"), "[0]int{}"}, {H("int8") + "(-1)", H("[0]int") + "{}"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{H("uint8") + "(1)", H("[0]int") + "{}"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {H("uintptr") + "(0x186a0)", H("[0]int") + "{}"},
			{H("float32") + "(1.25)", H("[0]int") + "{}"}, {s1: "skip"}, {H("complex64") + "(2+0i)", H("[0]int") + "{}"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {s1: "skip"}, {"(" + H("*int") + ")(" + sa + ")", H("[0]int") + "{}"}, {s1: "skip"},
			{"(" + H("unsafe.Pointer") + ")(0xc8)", H("[0]int") + "{}"}, {"(" + H("chan int") + ")(" + sb + ")", H("[0]int") + "{}"},
			{"(" + H("chan uint") + ")(nil)", H("[0]int") + "{}"}, {"(" + H("func(int) bool") + ")(" + sc + ")", H("[0]int") + "{}"},
			{H("string") + `("中a文b")`, H("[0]int") + "{}"}, {s1: "skip"}, {s1: "skip"}},
		{{H("<nil>"), "[3]interface {}{1, 2, (3+0i)}"}, {H("int8") + "(-1)", H("[3]interface {}") + "{1, 2, (3+0i)}"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {"[0]int{}", "[3]interface {}{" + H("1, 2, (3+0i)") + "}"}, {s1: "skip"}},
		{{s1: "skip"}, {H("int8") + "(-1)", H("[]int") + "(nil)"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{H("uint8") + "(1)", H("[]int") + "(nil)"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {H("uintptr") + "(0x186a0)", H("[]int") + "(nil)"},
			{H("float32") + "(1.25)", H("[]int") + "(nil)"}, {s1: "skip"}, {H("complex64") + "(2+0i)", H("[]int") + "(nil)"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {s1: "skip"}, {"(" + H("*int") + ")(" + sa + ")", H("[]int") + "(nil)"}, {s1: "skip"},
			{"(" + H("unsafe.Pointer") + ")(0xc8)", H("[]int") + "(nil)"}, {"(" + H("chan int") + ")(" + sb + ")", H("[]int") + "(nil)"},
			{"(" + H("chan uint") + ")(nil)", H("[]int") + "(nil)"}, {"(" + H("func(int) bool") + ")(" + sc + ")", H("[]int") + "(nil)"},
			{H("string") + `("中a文b")`, H("[]int") + "(nil)"}, {s1: "skip"}, {"[0]int" + H("{}"), "[]int(" + H("nil") + ")"},
			{"[3]interface {}" + H("{1, 2, (3+0i)}"), "[]int(" + H("nil") + ")"}, {s1: "skip"}},
		{{H("<nil>"), "[]int{}"}, {H("int8") + "(-1)", H("[]int") + "{}"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{H("uint8") + "(1)", H("[]int") + "{}"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {H("uintptr") + "(0x186a0)", H("[]int") + "{}"},
			{H("float32") + "(1.25)", H("[]int") + "{}"}, {s1: "skip"}, {H("complex64") + "(2+0i)", H("[]int") + "{}"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {s1: "skip"}, {"(" + H("*int") + ")(" + sa + ")", H("[]int") + "{}"}, {s1: "skip"},
			{"(" + H("unsafe.Pointer") + ")(0xc8)", H("[]int") + "{}"}, {"(" + H("chan int") + ")(" + sb + ")", H("[]int") + "{}"},
			{"(" + H("chan uint") + ")(nil)", H("[]int") + "{}"}, {"(" + H("func(int) bool") + ")(" + sc + ")", H("[]int") + "{}"},
			{H("string") + `("中a文b")`, H("[]int") + "{}"}, {s1: "skip"}, {s1: "skip"}, {"[3]interface {}{" + H("1, 2, (3+0i)") + "}", "[]int{}"},
			{"[]int(" + H("nil") + ")", "[]int" + H("{}")}, {s1: "skip"}},
		{{H("<nil>"), "[]interface {}{1, 2, (0+3i), 0x64}"}, {H("int8") + "(-1)", H("[]interface {}") + "{1, 2, (0+3i), 0x64}"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"}, {s1: "skip"},
			{s1: "skip"}, {"[0]int{}", "[]interface {}{" + H("1, 2, (0+3i), 0x64") + "}"},
			{"[3]interface {}{1, 2, (" + H("3+0i") + ")}", "[]interface {}{1, 2, (" + H("0+3i") + "), " + H("0x64") + "}"},
			{"[]int(" + H("nil") + ")", "[]interface {}" + H("{1, 2, (0+3i), 0x64}")}, {"[]int{}", "[]interface {}{" + H("1, 2, (0+3i), 0x64") + "}"}, {s1: "skip"}},
		// TODO
	}
	for i := 1; i < len(cs); i++ {
		b := cs[i]
		for j := 0; j <= i; j++ {
			a := cs[j]
			var r struct{ s1, s2 string }
			if i < len(rs)+1 && j < len(rs[i-1]) {
				r = rs[i-1][j]
			}
			if r.s1 == "skip" {
				continue
			}
			var d1, d2 tValueDiffer
			d1.writeValDiff(reflect.ValueOf(a), reflect.ValueOf(b), false)
			Equal(t, r.s1, d1.String(0), "i=%v, j=%v, s1\n%v\t%T\n%v\t%T", i, j, d1.String(0), a, d1.String(1), b)
			Equal(t, r.s2, d1.String(1), "i=%v, j=%v, s2\n%v\t%T\n%v\t%T", i, j, d1.String(0), a, d1.String(1), b)
			d2.writeValDiff(reflect.ValueOf(a), reflect.ValueOf(b), true)
			Equal(t, r.s2, d2.String(0), "i=%v, j=%v, s2\n%v\n%v", i, j, d2.String(1), d2.String(0))
			Equal(t, r.s1, d2.String(1), "i=%v, j=%v, s1\n%v\n%v", i, j, d2.String(1), d2.String(0))
		}
	}
}
